name: Migrate DB Schema

on:
  push:
    branches:
      - master
    paths:
      - 'src/migrations/**'
  pull_request:
    branches:
      - master
    paths:
      - 'src/migrations/**'
  workflow_dispatch:

jobs:
  Test:
    name: Test db migration using all migration files
    runs-on: ubuntu-latest
    container: node:14.15.4-alpine
    env:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: pass
      DB_NAME: upline
    services:
      # Label used to access the service container
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_DB: ${{ env.DB_NAME }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Cache npm caches
        uses: actions/cache@v2.1.3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Run DB migration
        run: >
          DB_HOST=${{ env.DB_HOST }}
          DB_PORT=${{ env.DB_PORT }}
          DB_USER=${{ env.DB_USER }}
          DB_PASSWORD=${{ env.DB_PASSWORD }}
          DB_NAME=${{ env.DB_NAME }}
          npm run migrate-db:run

  DeployStaging:
    name: Deploy the schema change to RDS stag DB
    needs: [Test]
    runs-on: ubuntu-latest
    environment:
      name: Staging
    env:
      SNAPSHOT_NAME: snapshot-${{ github.sha }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Check whether the snapshot for this commit exits
        id: snapshot-existence-check
        continue-on-error: true
        run: |
          echo "::set-output name=existing::false"
          aws rds describe-db-snapshots --db-snapshot-identifier ${{ env.SNAPSHOT_NAME }}
          echo "::set-output name=existing::true"
      - name: Backup target DB
        if: steps.snapshot-existence-check.outputs.existing == 'false'
        env:
          DB_INSTANCE_NAME: upline-db-stag
        run: >
          aws rds create-db-snapshot
          --db-instance-identifier $DB_INSTANCE_NAME
          --db-snapshot-identifier ${{ env.SNAPSHOT_NAME }}
      - name: Wait until snapshot is created successfully
        if: steps.snapshot-existence-check.outputs.existing == 'false'
        run: aws rds wait db-snapshot-completed --db-snapshot-identifier ${{ env.SNAPSHOT_NAME }}
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Cache npm caches
        uses: actions/cache@v2.1.3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Run DB migration
        env:
          DB_HOST: ${{ secrets.AWS_RDS_HOST }}
          DB_PORT: 5432
          DB_USER: ${{ secrets.AWS_RDS_USER }}
          DB_PASSWORD: ${{ secrets.AWS_RDS_PASSWORD }}
          DB_NAME: postgres
        run: >
          DB_HOST=$DB_HOST
          DB_PORT=5432
          DB_USER=$DB_USER
          DB_PASSWORD=$DB_PASSWORD
          DB_NAME=$DB_NAME
          npm run migrate-db:run
